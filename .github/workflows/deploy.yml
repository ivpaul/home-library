name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/lambda/package-lock.json

      - name: Install dependencies
        run: |
          cd backend/lambda
          npm ci

      - name: Run tests
        run: |
          cd backend/infra/scripts/testing
          chmod +x *.sh
          ./test-lambda.sh

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/lambda/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Install dependencies
        run: |
          cd backend/lambda
          npm ci

      - name: Create backup
        run: |
          cd backend/infra/scripts/ci-cd
          chmod +x *.sh
          ./backup.sh

      - name: Deploy infrastructure
        run: |
          cd backend/infra/scripts/ci-cd
          chmod +x *.sh
          ./deploy.sh

      - name: Get API Gateway URL
        id: get-api-url
        run: |
          if [ -f "backend/infra/scripts/deployment/config.json" ]; then
            API_URL=$(jq -r '.apiGateway.url' backend/infra/scripts/deployment/config.json)
            echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          else
            echo "api_url=Config file not found" >> $GITHUB_OUTPUT
          fi

      - name: Run post-deployment tests
        run: |
          cd backend/infra/scripts/testing
          chmod +x *.sh
          ./test-api.sh

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
            echo "API Gateway URL: ${{ steps.get-api-url.outputs.api_url }}"
          else
            echo "❌ Deployment failed!"
            echo "Check the logs for more details"
          fi 